{
  "stats": {
    "suites": 2,
    "tests": 25,
    "passes": 25,
    "pending": 0,
    "failures": 0,
    "start": "2021-04-28T14:30:02.419Z",
    "end": "2021-04-28T14:30:03.403Z",
    "duration": 984,
    "testsRegistered": 25,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "91f94a1e-7aa0-4699-a478-1d940e5ca934",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "572596d1-0de5-4f9e-86b9-ea61b5c033ec",
          "title": "Testing Pet API",
          "fullFile": "C:\\Users\\arodr\\Documents\\AngularProjects\\tfm\\server\\test\\petTest.js",
          "file": "\\test\\petTest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Get session token and user id in \"Testing Pet API\"",
              "fullTitle": "Testing Pet API \"before all\" hook: Get session token and user id in \"Testing Pet API\"",
              "timedOut": false,
              "duration": 296,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(urlUsers)\n    .post('/login')\n    .send({username: 'Alex', password: 'alex'})\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('token').not.be.null;\n        token = res.body.token;\n        userId = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "e188d5ab-8e82-4157-be71-c965483e20d6",
              "parentUUID": "572596d1-0de5-4f9e-86b9-ea61b5c033ec",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should not create a new pet without token",
              "fullTitle": "Testing Pet API should not create a new pet without token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/')\n    .send({})\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "d92cb5b8-f233-40fc-bf76-5f80c44da2bf",
              "parentUUID": "572596d1-0de5-4f9e-86b9-ea61b5c033ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new pet",
              "fullTitle": "Testing Pet API should create a new pet",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/')\n    .set('Authorization', 'Bearer '  + token)\n    .send({name: 'Coco', breed: 'Boxer', weight: 15, age: 5, description: 'description', picture: '', user_Id: userId})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('id');\n        id = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "297813c7-7e7f-4b2e-9384-0639a6d11ed9",
              "parentUUID": "572596d1-0de5-4f9e-86b9-ea61b5c033ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find pet without token",
              "fullTitle": "Testing Pet API should not find pet without token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/' + userId)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "3e177bdb-3475-48e2-8c73-650703fa54a7",
              "parentUUID": "572596d1-0de5-4f9e-86b9-ea61b5c033ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find pet for non-existing user id",
              "fullTitle": "Testing Pet API should not find pet for non-existing user id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/111')\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "328c9ed2-0f26-4e3b-b7f0-6f4fd91865e6",
              "parentUUID": "572596d1-0de5-4f9e-86b9-ea61b5c033ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find pet for its user id",
              "fullTitle": "Testing Pet API should find pet for its user id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/' + userId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(1);\n        expect(res.body[0]).to.have.property('id').to.be.equal(id);\n        done();\n    });",
              "err": {},
              "uuid": "bd638903-c5cc-4a32-9fd7-a0f0d75651de",
              "parentUUID": "572596d1-0de5-4f9e-86b9-ea61b5c033ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update pet without token",
              "fullTitle": "Testing Pet API should not update pet without token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/' + id)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "a84b41f5-c31a-431c-9d99-7b2b3624a3c6",
              "parentUUID": "572596d1-0de5-4f9e-86b9-ea61b5c033ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update pet for non-existing ID",
              "fullTitle": "Testing Pet API should not update pet for non-existing ID",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/111')\n    .set('Authorization', 'Bearer '  + token)\n    .send({name: 'another name', breed: 'another breed'})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "42019da3-4e43-4fba-8697-bbac572fbe37",
              "parentUUID": "572596d1-0de5-4f9e-86b9-ea61b5c033ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Created pet should not have changed",
              "fullTitle": "Testing Pet API Created pet should not have changed",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/' + userId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(1);\n        expect(res.body[0]).to.have.property('id').to.be.equal(id);\n        expect(res.body[0]).to.have.property('name').not.to.be.equal('another name');\n        expect(res.body[0]).to.have.property('breed').not.to.be.equal('another breed');\n        done();\n    });",
              "err": {},
              "uuid": "c179c80c-501f-43df-bccc-9d08ba835133",
              "parentUUID": "572596d1-0de5-4f9e-86b9-ea61b5c033ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update pet for its ID",
              "fullTitle": "Testing Pet API should update pet for its ID",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .send({name: 'updated name', breed: 'new breed'})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "017d8a1f-e300-41f8-bf83-8b4f7e2f298a",
              "parentUUID": "572596d1-0de5-4f9e-86b9-ea61b5c033ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete pet without token",
              "fullTitle": "Testing Pet API should not delete pet without token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + id)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "26f7fdc6-f284-4faf-ac4a-7f3ddb0e0eb9",
              "parentUUID": "572596d1-0de5-4f9e-86b9-ea61b5c033ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete pet for its ID",
              "fullTitle": "Testing Pet API should delete pet for its ID",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "492c290a-d501-4d58-a403-152599dbe439",
              "parentUUID": "572596d1-0de5-4f9e-86b9-ea61b5c033ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find deleted oet",
              "fullTitle": "Testing Pet API should not find deleted oet",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/' + userId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "1c714b6d-fbad-44d0-897b-315e63d85128",
              "parentUUID": "572596d1-0de5-4f9e-86b9-ea61b5c033ec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d92cb5b8-f233-40fc-bf76-5f80c44da2bf",
            "297813c7-7e7f-4b2e-9384-0639a6d11ed9",
            "3e177bdb-3475-48e2-8c73-650703fa54a7",
            "328c9ed2-0f26-4e3b-b7f0-6f4fd91865e6",
            "bd638903-c5cc-4a32-9fd7-a0f0d75651de",
            "a84b41f5-c31a-431c-9d99-7b2b3624a3c6",
            "42019da3-4e43-4fba-8697-bbac572fbe37",
            "c179c80c-501f-43df-bccc-9d08ba835133",
            "017d8a1f-e300-41f8-bf83-8b4f7e2f298a",
            "26f7fdc6-f284-4faf-ac4a-7f3ddb0e0eb9",
            "492c290a-d501-4d58-a403-152599dbe439",
            "1c714b6d-fbad-44d0-897b-315e63d85128"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 58,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "850e23b0-d6e9-478d-87f1-d9e1834a3c7d",
          "title": "Testing User API",
          "fullFile": "C:\\Users\\arodr\\Documents\\AngularProjects\\tfm\\server\\test\\userTest.js",
          "file": "\\test\\userTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should save a new user",
              "fullTitle": "Testing User API should save a new user",
              "timedOut": false,
              "duration": 278,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/')\n    .send({username: 'Celia', password: 'celia', address: 'new direction', description: 'new description'})\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('id');\n        id = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "5cc2fea6-6253-4132-b6f7-d2d046c0383e",
              "parentUUID": "850e23b0-d6e9-478d-87f1-d9e1834a3c7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find user for its name",
              "fullTitle": "Testing User API should find user for its name",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/Celia')\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(1);\n        expect(res.body[0]).to.have.property('id').to.be.equal(id);\n        done();\n    });",
              "err": {},
              "uuid": "200ec810-e868-4c87-8d3d-2752ee9fbbef",
              "parentUUID": "850e23b0-d6e9-478d-87f1-d9e1834a3c7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find user for non-existing user name",
              "fullTitle": "Testing User API should not find user for non-existing user name",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/Ce')\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "496c5f73-a4c2-4e80-ae10-73337c95b390",
              "parentUUID": "850e23b0-d6e9-478d-87f1-d9e1834a3c7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find user and return login token",
              "fullTitle": "Testing User API should find user and return login token",
              "timedOut": false,
              "duration": 279,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/login')\n    .send({username: 'Celia', password: 'celia'})\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('token').not.be.null;\n        token = res.body.token;\n        done();\n    });",
              "err": {},
              "uuid": "f76aec0d-29d6-4c2f-8531-6eca75647204",
              "parentUUID": "850e23b0-d6e9-478d-87f1-d9e1834a3c7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find user without token",
              "fullTitle": "Testing User API should not find user without token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + id)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "852838cf-9857-4844-9597-d7fed8b9cfd5",
              "parentUUID": "850e23b0-d6e9-478d-87f1-d9e1834a3c7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find user for its ID",
              "fullTitle": "Testing User API should find user for its ID",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(1);\n        expect(res.body[0]).to.have.property('id').to.be.equal(id);\n        done();\n    });",
              "err": {},
              "uuid": "59074be7-2056-4a1e-96f4-543833b6c65f",
              "parentUUID": "850e23b0-d6e9-478d-87f1-d9e1834a3c7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user without token",
              "fullTitle": "Testing User API should not update user without token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/' + id)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "8e3a100b-289d-47cd-a770-f3c7ad3d99bb",
              "parentUUID": "850e23b0-d6e9-478d-87f1-d9e1834a3c7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user for non-existing ID",
              "fullTitle": "Testing User API should not update user for non-existing ID",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/111')\n    .set('Authorization', 'Bearer '  + token)\n    .send({address: 'another address', description: 'another description'})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "8e4ab625-24c7-42a7-bd18-d0cb466d75e8",
              "parentUUID": "850e23b0-d6e9-478d-87f1-d9e1834a3c7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Created user should not have changed",
              "fullTitle": "Testing User API Created user should not have changed",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(1);\n        expect(res.body[0]).to.have.property('id').to.be.equal(id);\n        expect(res.body[0]).to.have.property('address').not.to.be.equal('another address');\n        expect(res.body[0]).to.have.property('description').not.to.be.equal('another description');\n        done();\n    });",
              "err": {},
              "uuid": "2394a485-3515-43ed-8645-fe346257c7a3",
              "parentUUID": "850e23b0-d6e9-478d-87f1-d9e1834a3c7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user for its ID",
              "fullTitle": "Testing User API should update user for its ID",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .send({address: 'updated address', description: 'updated description'})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "1221fede-1b26-4291-9945-3ecde4a38ab4",
              "parentUUID": "850e23b0-d6e9-478d-87f1-d9e1834a3c7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete user without token",
              "fullTitle": "Testing User API should not delete user without token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + id)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "7d4d6baf-4887-4528-b6a5-cb7ad2844cf6",
              "parentUUID": "850e23b0-d6e9-478d-87f1-d9e1834a3c7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete user for its ID",
              "fullTitle": "Testing User API should delete user for its ID",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "591d0bc0-7e46-4909-9927-8b029eb38e1c",
              "parentUUID": "850e23b0-d6e9-478d-87f1-d9e1834a3c7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find deleted user",
              "fullTitle": "Testing User API should not find deleted user",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "815479e7-3506-4d6a-9d51-0e9ad49e1bbd",
              "parentUUID": "850e23b0-d6e9-478d-87f1-d9e1834a3c7d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5cc2fea6-6253-4132-b6f7-d2d046c0383e",
            "200ec810-e868-4c87-8d3d-2752ee9fbbef",
            "496c5f73-a4c2-4e80-ae10-73337c95b390",
            "f76aec0d-29d6-4c2f-8531-6eca75647204",
            "852838cf-9857-4844-9597-d7fed8b9cfd5",
            "59074be7-2056-4a1e-96f4-543833b6c65f",
            "8e3a100b-289d-47cd-a770-f3c7ad3d99bb",
            "8e4ab625-24c7-42a7-bd18-d0cb466d75e8",
            "2394a485-3515-43ed-8645-fe346257c7a3",
            "1221fede-1b26-4291-9945-3ecde4a38ab4",
            "7d4d6baf-4887-4528-b6a5-cb7ad2844cf6",
            "591d0bc0-7e46-4909-9927-8b029eb38e1c",
            "815479e7-3506-4d6a-9d51-0e9ad49e1bbd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 607,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}