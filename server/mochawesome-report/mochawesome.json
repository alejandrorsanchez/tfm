{
  "stats": {
    "suites": 5,
    "tests": 68,
    "passes": 68,
    "pending": 0,
    "failures": 0,
    "start": "2021-06-08T08:46:49.313Z",
    "end": "2021-06-08T08:46:53.768Z",
    "duration": 4455,
    "testsRegistered": 68,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "957de4ca-8a1a-4d31-afb7-3a4ad54cf9f2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dadfd472-3784-4851-be60-59aba3bbae39",
          "title": "Testing Add API",
          "fullFile": "C:\\Users\\arodr\\Documents\\AngularProjects\\tfm\\server\\test\\addTest.js",
          "file": "\\test\\addTest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Get session token and user id in \"Testing Add API\"",
              "fullTitle": "Testing Add API \"before all\" hook: Get session token and user id in \"Testing Add API\"",
              "timedOut": false,
              "duration": 454,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(urlUsers)\n    .post('/login')\n    .send({username: 'Prueba', password: 'prueba'})\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('token').not.be.null;\n        token = res.body.token;\n        userId = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "44d05ea5-a890-4ef2-976b-95e412cdf537",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new pet for test user",
              "fullTitle": "Testing Add API should create a new pet for test user",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(urlPets)\n    .post('/')\n    .set('Authorization', 'Bearer '  + token)\n    .send({name: 'pet test', breed: 'breed test', weight: 1, age: 1, description: 'descriptionTest', picture: '', userId: userId})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('id');\n        petId = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "c6585fdb-d561-44b0-becf-e5cdc229e9f6",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find any add by user id",
              "fullTitle": "Testing Add API should not find any add by user id",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + userId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "bb1b4ac5-aceb-4188-ab46-4a3850915cb7",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create a new volunteer add without token",
              "fullTitle": "Testing Add API should not create a new volunteer add without token",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/volunteer')\n    .send({})\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "76ac2bfb-dad7-4ed9-aabe-1f789db34cc1",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new volunteer add",
              "fullTitle": "Testing Add API should create a new volunteer add",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/volunteer')\n    .set('Authorization', 'Bearer '  + token)\n    .send({userId: userId, petId: null})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('id');\n        volunteerId = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "80a62d62-3051-4e6a-8627-e91fa8ec4b55",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create the same volunteer add",
              "fullTitle": "Testing Add API should not create the same volunteer add",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/volunteer')\n    .set('Authorization', 'Bearer '  + token)\n    .send({userId: userId, petId: null})\n    .end(function (err, res){\n        expect(res).to.have.status(409);\n        done();\n    });",
              "err": {},
              "uuid": "cdff9ec8-9c36-4ced-a544-1e78f08229e1",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find created add without token",
              "fullTitle": "Testing Add API should not find created add without token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + userId)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "c04626b9-0c2c-4d22-82ed-d759c16f5978",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find add by non-existing user id",
              "fullTitle": "Testing Add API should not find add by non-existing user id",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/0000')\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "ee86e4ff-df4a-4715-a576-5ee5f3b7be19",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find volunteer add by its user id",
              "fullTitle": "Testing Add API should find volunteer add by its user id",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + userId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(1);\n        expect(res.body[0]).to.have.property('id').to.be.equal(volunteerId);\n        done();\n    });",
              "err": {},
              "uuid": "4afb5db8-fd1b-4066-8ade-5f1977c9bbf2",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create a new adoption add without token",
              "fullTitle": "Testing Add API should not create a new adoption add without token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/adoption')\n    .send({})\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "d1b77ea7-4120-4826-ab3d-16fb656d1ee6",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new adoption add",
              "fullTitle": "Testing Add API should create a new adoption add",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/adoption')\n    .set('Authorization', 'Bearer '  + token)\n    .send({userId: userId, petId: petId})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('id');\n        adoptionId = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "2237c252-47dc-4818-b1a4-908d672af915",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create the same adoption add",
              "fullTitle": "Testing Add API should not create the same adoption add",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/adoption')\n    .set('Authorization', 'Bearer '  + token)\n    .send({userId: userId, petId: petId})\n    .end(function (err, res){\n        expect(res).to.have.status(409);\n        done();\n    });",
              "err": {},
              "uuid": "6b3f2db8-261d-4c34-8392-4c107e09b297",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find adoption add by its user id",
              "fullTitle": "Testing Add API should find adoption add by its user id",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + userId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(2);\n        expect(res.body[1]).to.have.property('id').to.be.equal(adoptionId);\n        done();\n    });",
              "err": {},
              "uuid": "4d0547d0-5370-4242-b618-15f2268b8e78",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete add without token",
              "fullTitle": "Testing Add API should not delete add without token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + volunteerId)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "e17600aa-d58c-446a-be83-c3e8ed157180",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete volunteer add by its ID",
              "fullTitle": "Testing Add API should delete volunteer add by its ID",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + volunteerId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "a4726dfc-3384-401b-88b4-c66cf6d6dab0",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find deleted volunteer add",
              "fullTitle": "Testing Add API should not find deleted volunteer add",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + userId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(1);\n        expect(res.body[0]).to.have.property('id').not.be.equal(volunteerId);\n        done();\n    });",
              "err": {},
              "uuid": "84ef8449-8fff-473a-901c-14d072317d6c",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete adoption add by its ID",
              "fullTitle": "Testing Add API should delete adoption add by its ID",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + adoptionId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "2fa63f98-4de6-46eb-b7b8-7a7d755118e2",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find deleted adoption add",
              "fullTitle": "Testing Add API should not find deleted adoption add",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + userId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "e8aeb3e2-77df-4c5a-ae94-7f00fa10f5b8",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find any add by type 1 (Adoption) for my user id when another user searches for it",
              "fullTitle": "Testing Add API should not find any add by type 1 (Adoption) for my user id when another user searches for it",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/')\n    .set('Authorization', 'Bearer '  + token)\n    .send({type: 1, userId: 1})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(404);\n        done();\n    });",
              "err": {},
              "uuid": "47085fcb-7370-4e60-bda8-597a58e8d2b9",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find any add by type 2 (Volunteer) for my user id when another user searches for it",
              "fullTitle": "Testing Add API should not find any add by type 2 (Volunteer) for my user id when another user searches for it",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/')\n    .set('Authorization', 'Bearer '  + token)\n    .send({type: 2, userId: 1})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(404);\n        done();\n    });",
              "err": {},
              "uuid": "999e60db-d43a-4dba-a139-e30efba3cb58",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete pet for its ID",
              "fullTitle": "Testing Add API should delete pet for its ID",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(urlPets)\n    .delete('/' + petId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "a44fd357-2194-4f06-bcdf-f462007f7ad2",
              "parentUUID": "dadfd472-3784-4851-be60-59aba3bbae39",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c6585fdb-d561-44b0-becf-e5cdc229e9f6",
            "bb1b4ac5-aceb-4188-ab46-4a3850915cb7",
            "76ac2bfb-dad7-4ed9-aabe-1f789db34cc1",
            "80a62d62-3051-4e6a-8627-e91fa8ec4b55",
            "cdff9ec8-9c36-4ced-a544-1e78f08229e1",
            "c04626b9-0c2c-4d22-82ed-d759c16f5978",
            "ee86e4ff-df4a-4715-a576-5ee5f3b7be19",
            "4afb5db8-fd1b-4066-8ade-5f1977c9bbf2",
            "d1b77ea7-4120-4826-ab3d-16fb656d1ee6",
            "2237c252-47dc-4818-b1a4-908d672af915",
            "6b3f2db8-261d-4c34-8392-4c107e09b297",
            "4d0547d0-5370-4242-b618-15f2268b8e78",
            "e17600aa-d58c-446a-be83-c3e8ed157180",
            "a4726dfc-3384-401b-88b4-c66cf6d6dab0",
            "84ef8449-8fff-473a-901c-14d072317d6c",
            "2fa63f98-4de6-46eb-b7b8-7a7d755118e2",
            "e8aeb3e2-77df-4c5a-ae94-7f00fa10f5b8",
            "47085fcb-7370-4e60-bda8-597a58e8d2b9",
            "999e60db-d43a-4dba-a139-e30efba3cb58",
            "a44fd357-2194-4f06-bcdf-f462007f7ad2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 193,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
          "title": "Testing Comunication API",
          "fullFile": "C:\\Users\\arodr\\Documents\\AngularProjects\\tfm\\server\\test\\comunicationTest.js",
          "file": "\\test\\comunicationTest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Get session token and user id in \"Testing Comunication API\"",
              "fullTitle": "Testing Comunication API \"before all\" hook: Get session token and user id in \"Testing Comunication API\"",
              "timedOut": false,
              "duration": 355,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(urlUsers)\n    .post('/login')\n    .send({username: 'Prueba', password: 'prueba'})\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('token').not.be.null;\n        token = res.body.token;\n        myUserId = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "fada3510-0e7a-494a-8876-805803c72456",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should save another user for interaction",
              "fullTitle": "Testing Comunication API should save another user for interaction",
              "timedOut": false,
              "duration": 349,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(urlUsers)\n    .post('/')\n    .send({username: 'Prueba2', password: 'Prueba2', address: 'Prueba2 direction', description: 'Prueba2 description', email: 'Prueba2@gmail.com'})\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('id');\n        chatUserId = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "e2bae96c-2790-44ad-90ad-80495189e58d",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find any comunications without token",
              "fullTitle": "Testing Comunication API should not find any comunications without token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + myUserId)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "f68a9fe4-e6bf-4153-b532-a9c100fec9f2",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find any comunication by my user id",
              "fullTitle": "Testing Comunication API should not find any comunication by my user id",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + myUserId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "4dd04a8d-9121-41f9-968f-9d9c69be9f10",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create a new chat without token",
              "fullTitle": "Testing Comunication API should not create a new chat without token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/')\n    .send({})\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "80305002-aa2e-4641-80f6-bdd1f0f03422",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new chat between two users",
              "fullTitle": "Testing Comunication API should create a new chat between two users",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/')\n    .set('Authorization', 'Bearer '  + token)\n    .send({userId1: myUserId, userId2: chatUserId, messages: 'hola', type: 1, notification: chatUserId})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('id');\n        chatId = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "3cf433b0-b69a-4fd0-b9b3-2a1a750558d3",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create the same chat",
              "fullTitle": "Testing Comunication API should not create the same chat",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/')\n    .set('Authorization', 'Bearer '  + token)\n    .send({userId1: myUserId, userId2: chatUserId, messages: 'hola', type: 1, notification: chatUserId})\n    .end(function (err, res){\n        expect(res).to.have.status(409);\n        done();\n    });",
              "err": {},
              "uuid": "fafb68bc-f83a-4f60-bf67-1e1cb1dd9790",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find chat by non-existing user id",
              "fullTitle": "Testing Comunication API should not find chat by non-existing user id",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/0000')\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "b9e00942-3e4f-464a-84b1-0411a9f9d018",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find chat by my user id",
              "fullTitle": "Testing Comunication API should find chat by my user id",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + myUserId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(1);\n        expect(res.body[0]).to.have.property('id').to.be.equal(chatId);\n        done();\n    });",
              "err": {},
              "uuid": "724b2302-d53b-4fd7-9f94-635a98af2aa0",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find chat by chat user id",
              "fullTitle": "Testing Comunication API should find chat by chat user id",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + chatUserId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(1);\n        expect(res.body[0]).to.have.property('id').to.be.equal(chatId);\n        done();\n    });",
              "err": {},
              "uuid": "78465dd5-0bca-4c9f-a807-f442bcb5216d",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find created chat between users without token",
              "fullTitle": "Testing Comunication API should not find created chat between users without token",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/')\n    .query({userId1: myUserId, userId2: chatUserId, type: 1})\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "7cc953da-0bdc-4dd6-91c4-ed739a22b399",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find chat between users by non-existing users id",
              "fullTitle": "Testing Comunication API should not find chat between users by non-existing users id",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/')\n    .query({userId1: '0000', userId2: 'xxxxx', type: 1})\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "81100753-9c50-4c7f-bb88-7f588ca2b612",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find chat between users by its users id and type 1 (Adoption)",
              "fullTitle": "Testing Comunication API should find chat between users by its users id and type 1 (Adoption)",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/')\n    .query({userId1: myUserId, userId2: chatUserId, type: '1'})\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('id').to.be.equal(chatId);\n        expect(res.body).to.have.property('notification').to.be.equal(chatUserId);\n        done();\n    });",
              "err": {},
              "uuid": "97b4d83b-68cd-41a7-933d-46e741b370df",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update chat without token",
              "fullTitle": "Testing Comunication API should not update chat without token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/' + chatId)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "f6b9d157-3899-45ce-b125-cd91ea4fac9e",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update chat by non-existing ID",
              "fullTitle": "Testing Comunication API should not update chat by non-existing ID",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/00000')\n    .set('Authorization', 'Bearer '  + token)\n    .send({messages: 'hola', notification: 'notif'})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(404);\n        done();\n    });",
              "err": {},
              "uuid": "1f7220dd-efa3-4ce9-823d-f51609d54a9e",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update chat by its ID",
              "fullTitle": "Testing Comunication API should update chat by its ID",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/' + chatId)\n    .set('Authorization', 'Bearer '  + token)\n    .send({messages: 'hola', notification: myUserId})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "aaabc7a4-c3ec-4b26-9d58-a9e4b9ae8a86",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Chat between users should now have notifications for the other user",
              "fullTitle": "Testing Comunication API Chat between users should now have notifications for the other user",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/')\n    .query({userId1: myUserId, userId2: chatUserId, type: '1'})\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('id').to.be.equal(chatId);\n        expect(res.body).to.have.property('notification').to.be.equal(myUserId);\n        done();\n    });",
              "err": {},
              "uuid": "f1965c63-a6be-47fc-94f6-e0ed16230d11",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete chat without token",
              "fullTitle": "Testing Comunication API should not delete chat without token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + chatId)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "a5f73cfc-805f-4e58-b4b3-bf92836165da",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete chat by its ID",
              "fullTitle": "Testing Comunication API should delete chat by its ID",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + chatId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "594b4c48-c793-4b83-b912-9fee47de1f00",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find deleted chat by any of its users id",
              "fullTitle": "Testing Comunication API should not find deleted chat by any of its users id",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + chatUserId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "9f8dbb7b-8b80-45f0-ab62-4171e2aef6f0",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete chat user for its ID",
              "fullTitle": "Testing Comunication API should delete chat user for its ID",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(urlUsers)\n    .delete('/' + chatUserId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "020f041e-478e-40b9-a5ff-6c80d235e167",
              "parentUUID": "d8c21dd0-38b7-44bd-b7f3-cd067ced414f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e2bae96c-2790-44ad-90ad-80495189e58d",
            "f68a9fe4-e6bf-4153-b532-a9c100fec9f2",
            "4dd04a8d-9121-41f9-968f-9d9c69be9f10",
            "80305002-aa2e-4641-80f6-bdd1f0f03422",
            "3cf433b0-b69a-4fd0-b9b3-2a1a750558d3",
            "fafb68bc-f83a-4f60-bf67-1e1cb1dd9790",
            "b9e00942-3e4f-464a-84b1-0411a9f9d018",
            "724b2302-d53b-4fd7-9f94-635a98af2aa0",
            "78465dd5-0bca-4c9f-a807-f442bcb5216d",
            "7cc953da-0bdc-4dd6-91c4-ed739a22b399",
            "81100753-9c50-4c7f-bb88-7f588ca2b612",
            "97b4d83b-68cd-41a7-933d-46e741b370df",
            "f6b9d157-3899-45ce-b125-cd91ea4fac9e",
            "1f7220dd-efa3-4ce9-823d-f51609d54a9e",
            "aaabc7a4-c3ec-4b26-9d58-a9e4b9ae8a86",
            "f1965c63-a6be-47fc-94f6-e0ed16230d11",
            "a5f73cfc-805f-4e58-b4b3-bf92836165da",
            "594b4c48-c793-4b83-b912-9fee47de1f00",
            "9f8dbb7b-8b80-45f0-ab62-4171e2aef6f0",
            "020f041e-478e-40b9-a5ff-6c80d235e167"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 497,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4c37a59a-2837-4a81-bc89-52866a722a52",
          "title": "Testing Email API",
          "fullFile": "C:\\Users\\arodr\\Documents\\AngularProjects\\tfm\\server\\test\\emailTest.js",
          "file": "\\test\\emailTest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Get session token and user id in \"Testing Email API\"",
              "fullTitle": "Testing Email API \"before all\" hook: Get session token and user id in \"Testing Email API\"",
              "timedOut": false,
              "duration": 332,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(urlUsers)\n    .post('/login')\n    .send({username: 'Prueba', password: 'prueba'})\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('token').not.be.null;\n        token = res.body.token;\n        userId = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "c69f527c-999c-402d-ab88-fd78327ef58c",
              "parentUUID": "4c37a59a-2837-4a81-bc89-52866a722a52",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should not send email without token",
              "fullTitle": "Testing Email API should not send email without token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/')\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "a6376b5d-214f-40ae-bcc7-c23e1b1e4370",
              "parentUUID": "4c37a59a-2837-4a81-bc89-52866a722a52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send email and return 200",
              "fullTitle": "Testing Email API should send email and return 200",
              "timedOut": false,
              "duration": 1271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/')\n    .send({senderName: 'Sender', receiverName: 'Receiver', receiverEmail: 'receiver@gmail.com'})\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "6f9fcaf6-860e-47a1-ab6a-e43def3c1929",
              "parentUUID": "4c37a59a-2837-4a81-bc89-52866a722a52",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a6376b5d-214f-40ae-bcc7-c23e1b1e4370",
            "6f9fcaf6-860e-47a1-ab6a-e43def3c1929"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1276,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c12780d6-94ca-4172-a2c1-6aa04c859356",
          "title": "Testing Pet API",
          "fullFile": "C:\\Users\\arodr\\Documents\\AngularProjects\\tfm\\server\\test\\petTest.js",
          "file": "\\test\\petTest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Get session token and user id in \"Testing Pet API\"",
              "fullTitle": "Testing Pet API \"before all\" hook: Get session token and user id in \"Testing Pet API\"",
              "timedOut": false,
              "duration": 358,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(urlUsers)\n    .post('/login')\n    .send({username: 'Prueba', password: 'prueba'})\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('token').not.be.null;\n        token = res.body.token;\n        userId = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "e8866d9a-6d30-45d3-b6e5-07c48cc51b40",
              "parentUUID": "c12780d6-94ca-4172-a2c1-6aa04c859356",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should not create a new pet without token",
              "fullTitle": "Testing Pet API should not create a new pet without token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/')\n    .send({})\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "ad62321d-9add-410e-b7b6-048ab7e64082",
              "parentUUID": "c12780d6-94ca-4172-a2c1-6aa04c859356",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new pet",
              "fullTitle": "Testing Pet API should create a new pet",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/')\n    .set('Authorization', 'Bearer '  + token)\n    .send({name: 'Coco', breed: 'Boxer', weight: 15, age: 5, description: 'description', picture: '', userId: userId})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('id');\n        id = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "d5bd9575-fc08-43e9-961c-5e5171137633",
              "parentUUID": "c12780d6-94ca-4172-a2c1-6aa04c859356",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find pet without token",
              "fullTitle": "Testing Pet API should not find pet without token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/' + userId)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "3e65a10a-211d-4e7b-a687-140e7772ad62",
              "parentUUID": "c12780d6-94ca-4172-a2c1-6aa04c859356",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find pet by non-existing id",
              "fullTitle": "Testing Pet API should not find pet by non-existing id",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('id').to.be.equal(id);\n        done();\n    });",
              "err": {},
              "uuid": "2cad3e4c-6f3e-4c7b-8aaa-2bf6d34a1fc0",
              "parentUUID": "c12780d6-94ca-4172-a2c1-6aa04c859356",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find pet by its id",
              "fullTitle": "Testing Pet API should find pet by its id",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/00000')\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(404);\n        done();\n    });",
              "err": {},
              "uuid": "fbc7deed-9463-42e3-a2b6-fd8051aafd5d",
              "parentUUID": "c12780d6-94ca-4172-a2c1-6aa04c859356",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find pet by non-existing user id",
              "fullTitle": "Testing Pet API should not find pet by non-existing user id",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/00000')\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "dcdbfe05-c459-481e-a6cd-a832df975af2",
              "parentUUID": "c12780d6-94ca-4172-a2c1-6aa04c859356",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find pet by its user id",
              "fullTitle": "Testing Pet API should find pet by its user id",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/' + userId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(1);\n        expect(res.body[0]).to.have.property('id').to.be.equal(id);\n        done();\n    });",
              "err": {},
              "uuid": "4893985d-e038-41d5-a55d-5210947f7ef4",
              "parentUUID": "c12780d6-94ca-4172-a2c1-6aa04c859356",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update pet without token",
              "fullTitle": "Testing Pet API should not update pet without token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/' + id)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "596a802a-8a19-4fe6-ae01-473052f16243",
              "parentUUID": "c12780d6-94ca-4172-a2c1-6aa04c859356",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update pet by non-existing ID",
              "fullTitle": "Testing Pet API should not update pet by non-existing ID",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/00000')\n    .set('Authorization', 'Bearer '  + token)\n    .send({name: 'another name', breed: 'another breed'})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(404);\n        done();\n    });",
              "err": {},
              "uuid": "2ddb02cb-f312-41b3-83f2-bc34660de76e",
              "parentUUID": "c12780d6-94ca-4172-a2c1-6aa04c859356",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update pet by its ID",
              "fullTitle": "Testing Pet API should update pet by its ID",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .send({name: 'updated name', breed: 'new breed'})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "cdc8ac00-a8e9-4772-b391-a650f47f0cb7",
              "parentUUID": "c12780d6-94ca-4172-a2c1-6aa04c859356",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete pet without token",
              "fullTitle": "Testing Pet API should not delete pet without token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + id)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "23a0f38d-f4f9-417b-80a6-e5f7f73ef734",
              "parentUUID": "c12780d6-94ca-4172-a2c1-6aa04c859356",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete pet by its ID",
              "fullTitle": "Testing Pet API should delete pet by its ID",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "9e0b384e-0a61-4ca9-87b6-f4e0aba0e493",
              "parentUUID": "c12780d6-94ca-4172-a2c1-6aa04c859356",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find deleted pet",
              "fullTitle": "Testing Pet API should not find deleted pet",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/' + userId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "fe676ed2-b00e-41ed-8641-0b2dc12b2718",
              "parentUUID": "c12780d6-94ca-4172-a2c1-6aa04c859356",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ad62321d-9add-410e-b7b6-048ab7e64082",
            "d5bd9575-fc08-43e9-961c-5e5171137633",
            "3e65a10a-211d-4e7b-a687-140e7772ad62",
            "2cad3e4c-6f3e-4c7b-8aaa-2bf6d34a1fc0",
            "fbc7deed-9463-42e3-a2b6-fd8051aafd5d",
            "dcdbfe05-c459-481e-a6cd-a832df975af2",
            "4893985d-e038-41d5-a55d-5210947f7ef4",
            "596a802a-8a19-4fe6-ae01-473052f16243",
            "2ddb02cb-f312-41b3-83f2-bc34660de76e",
            "cdc8ac00-a8e9-4772-b391-a650f47f0cb7",
            "23a0f38d-f4f9-417b-80a6-e5f7f73ef734",
            "9e0b384e-0a61-4ca9-87b6-f4e0aba0e493",
            "fe676ed2-b00e-41ed-8641-0b2dc12b2718"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 118,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2b29426e-7de1-466d-bac6-c49be14a4933",
          "title": "Testing User API",
          "fullFile": "C:\\Users\\arodr\\Documents\\AngularProjects\\tfm\\server\\test\\userTest.js",
          "file": "\\test\\userTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should save a new user",
              "fullTitle": "Testing User API should save a new user",
              "timedOut": false,
              "duration": 354,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/')\n    .send({username: 'Celia', password: 'celia', address: 'new direction', description: 'new description', email: 'email@gmail.com'})\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('id');\n        id = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "296e57f2-b030-4f1e-8b02-cfcf1179b583",
              "parentUUID": "2b29426e-7de1-466d-bac6-c49be14a4933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find user by its name and therefore return 409 by app logic",
              "fullTitle": "Testing User API should find user by its name and therefore return 409 by app logic",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/Celia')\n    .end(function (err, res){\n        expect(res).to.have.status(409);\n        expect(res.body).to.have.property('message').to.be.equal('Ese usuario ya existe');\n        done();\n    });",
              "err": {},
              "uuid": "41fecd9c-811a-494a-a2b3-89a7e9f22fce",
              "parentUUID": "2b29426e-7de1-466d-bac6-c49be14a4933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find user by non-existing user name and therefore return 200 by app logic",
              "fullTitle": "Testing User API should not find user by non-existing user name and therefore return 200 by app logic",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/Ce')\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "c05e2a4c-5349-45bd-a9a5-6d89ffd336f2",
              "parentUUID": "2b29426e-7de1-466d-bac6-c49be14a4933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find user and return login token",
              "fullTitle": "Testing User API should find user and return login token",
              "timedOut": false,
              "duration": 337,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/login')\n    .send({username: 'Celia', password: 'celia'})\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('token').not.be.null;\n        token = res.body.token;\n        done();\n    });",
              "err": {},
              "uuid": "876451f6-f194-4f96-b14b-b3afa53b5e95",
              "parentUUID": "2b29426e-7de1-466d-bac6-c49be14a4933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find user without token",
              "fullTitle": "Testing User API should not find user without token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + id)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "bd026ff9-4476-4a6d-8088-fbaa3fce3cfd",
              "parentUUID": "2b29426e-7de1-466d-bac6-c49be14a4933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find user by its ID",
              "fullTitle": "Testing User API should find user by its ID",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('id').to.be.equal(id);\n        done();\n    });",
              "err": {},
              "uuid": "0fedb473-ae2a-4e0a-8e26-0d5ab4db3889",
              "parentUUID": "2b29426e-7de1-466d-bac6-c49be14a4933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user without token",
              "fullTitle": "Testing User API should not update user without token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/' + id)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "9a4de564-9813-418d-afce-4bfaab0a3433",
              "parentUUID": "2b29426e-7de1-466d-bac6-c49be14a4933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user by non-existing ID",
              "fullTitle": "Testing User API should not update user by non-existing ID",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/00000')\n    .set('Authorization', 'Bearer '  + token)\n    .send({address: 'another address', description: 'another description'})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(404);\n        done();\n    });",
              "err": {},
              "uuid": "4cf76675-9f1c-49cf-97be-c89352540c60",
              "parentUUID": "2b29426e-7de1-466d-bac6-c49be14a4933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user by its ID",
              "fullTitle": "Testing User API should update user by its ID",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .send({address: 'updated address', description: 'updated description'})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "c4fcdf3f-03a3-4d1e-abbf-38fbb3f99db1",
              "parentUUID": "2b29426e-7de1-466d-bac6-c49be14a4933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete user without token",
              "fullTitle": "Testing User API should not delete user without token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + id)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "3a58435e-ef2f-4d1f-b1d3-2315d4334ed2",
              "parentUUID": "2b29426e-7de1-466d-bac6-c49be14a4933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete user by non-existing ID",
              "fullTitle": "Testing User API should not delete user by non-existing ID",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/00000')\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(404);\n        done();\n    });",
              "err": {},
              "uuid": "0fae9225-f5db-4c9e-84c6-89cbbef32611",
              "parentUUID": "2b29426e-7de1-466d-bac6-c49be14a4933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete user by its ID",
              "fullTitle": "Testing User API should delete user by its ID",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "b1c6bc9c-e00a-4041-8d45-275da4fc1e09",
              "parentUUID": "2b29426e-7de1-466d-bac6-c49be14a4933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find deleted user",
              "fullTitle": "Testing User API should not find deleted user",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(404);\n        done();\n    });",
              "err": {},
              "uuid": "c588619f-4bec-4c1f-a64d-18060fe996ac",
              "parentUUID": "2b29426e-7de1-466d-bac6-c49be14a4933",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "296e57f2-b030-4f1e-8b02-cfcf1179b583",
            "41fecd9c-811a-494a-a2b3-89a7e9f22fce",
            "c05e2a4c-5349-45bd-a9a5-6d89ffd336f2",
            "876451f6-f194-4f96-b14b-b3afa53b5e95",
            "bd026ff9-4476-4a6d-8088-fbaa3fce3cfd",
            "0fedb473-ae2a-4e0a-8e26-0d5ab4db3889",
            "9a4de564-9813-418d-afce-4bfaab0a3433",
            "4cf76675-9f1c-49cf-97be-c89352540c60",
            "c4fcdf3f-03a3-4d1e-abbf-38fbb3f99db1",
            "3a58435e-ef2f-4d1f-b1d3-2315d4334ed2",
            "0fae9225-f5db-4c9e-84c6-89cbbef32611",
            "b1c6bc9c-e00a-4041-8d45-275da4fc1e09",
            "c588619f-4bec-4c1f-a64d-18060fe996ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 784,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}