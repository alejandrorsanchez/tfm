{
  "stats": {
    "suites": 2,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2021-05-06T10:33:56.189Z",
    "end": "2021-05-06T10:33:57.040Z",
    "duration": 851,
    "testsRegistered": 25,
    "passPercent": 52,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 12,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "d2a66e22-eb64-4a80-8e64-ca85e967f7e0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "52e7919c-fcaa-43e7-8b5f-6f3a6cdc19e8",
          "title": "Testing Pet API",
          "fullFile": "C:\\Users\\arodr\\Documents\\AngularProjects\\tfm\\server\\test\\petTest.js",
          "file": "\\test\\petTest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Get session token and user id for \"should not create a new pet without token\"",
              "fullTitle": "Testing Pet API \"before all\" hook: Get session token and user id for \"should not create a new pet without token\"",
              "timedOut": false,
              "duration": 73,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(urlUsers)\n    .post('/login')\n    .send({username: 'Alex', password: 'alex'})\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('token').not.be.null;\n        token = res.body.token;\n        userId = res.body.id;\n        done();\n    });",
              "err": {
                "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 404",
                "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 404\n    at C:\\Users\\arodr\\Documents\\AngularProjects\\tfm\\server\\test\\petTest.js:18:37\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:716:12)\n    at C:\\Users\\arodr\\Documents\\AngularProjects\\tfm\\server\\node_modules\\superagent\\lib\\node\\index.js:916:18\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\lib\\node\\parsers\\json.js:19:7)\n    at endReadableNT (_stream_readable.js:1327:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": "- 404\n+ 200\n"
              },
              "uuid": "b059380c-97b8-4b7a-9b9e-a3501485ff6e",
              "parentUUID": "52e7919c-fcaa-43e7-8b5f-6f3a6cdc19e8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should not create a new pet without token",
              "fullTitle": "Testing Pet API should not create a new pet without token",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/')\n    .send({})\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "dfac021d-02ec-4c88-88d3-a416b034bc77",
              "parentUUID": "52e7919c-fcaa-43e7-8b5f-6f3a6cdc19e8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should create a new pet",
              "fullTitle": "Testing Pet API should create a new pet",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/')\n    .set('Authorization', 'Bearer '  + token)\n    .send({name: 'Coco', breed: 'Boxer', weight: 15, age: 5, description: 'description', picture: '', user_Id: userId})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('id');\n        id = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "ba6006bf-5026-4fe3-a19e-5d7dd222d654",
              "parentUUID": "52e7919c-fcaa-43e7-8b5f-6f3a6cdc19e8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should not find pet without token",
              "fullTitle": "Testing Pet API should not find pet without token",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/' + userId)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "9bc9a72d-e6c3-4b45-9ef5-c668d186d888",
              "parentUUID": "52e7919c-fcaa-43e7-8b5f-6f3a6cdc19e8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should not find pet for non-existing user id",
              "fullTitle": "Testing Pet API should not find pet for non-existing user id",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/111')\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "348c61cb-510e-47b6-8b0d-202f8d0af2c4",
              "parentUUID": "52e7919c-fcaa-43e7-8b5f-6f3a6cdc19e8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should find pet for its user id",
              "fullTitle": "Testing Pet API should find pet for its user id",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/' + userId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(1);\n        expect(res.body[0]).to.have.property('id').to.be.equal(id);\n        done();\n    });",
              "err": {},
              "uuid": "aff725a0-3dbe-4c12-93b4-5519408814e3",
              "parentUUID": "52e7919c-fcaa-43e7-8b5f-6f3a6cdc19e8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should not update pet without token",
              "fullTitle": "Testing Pet API should not update pet without token",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/' + id)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "2c905725-77cf-42e8-86b2-cd64785505b8",
              "parentUUID": "52e7919c-fcaa-43e7-8b5f-6f3a6cdc19e8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should not update pet for non-existing ID",
              "fullTitle": "Testing Pet API should not update pet for non-existing ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/111')\n    .set('Authorization', 'Bearer '  + token)\n    .send({name: 'another name', breed: 'another breed'})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "c8e1f880-8235-4e0e-ba96-252413eaf9a2",
              "parentUUID": "52e7919c-fcaa-43e7-8b5f-6f3a6cdc19e8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Created pet should not have changed",
              "fullTitle": "Testing Pet API Created pet should not have changed",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/' + userId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(1);\n        expect(res.body[0]).to.have.property('id').to.be.equal(id);\n        expect(res.body[0]).to.have.property('name').not.to.be.equal('another name');\n        expect(res.body[0]).to.have.property('breed').not.to.be.equal('another breed');\n        done();\n    });",
              "err": {},
              "uuid": "006f6757-a203-44f3-a906-a7a8f452c59d",
              "parentUUID": "52e7919c-fcaa-43e7-8b5f-6f3a6cdc19e8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should update pet for its ID",
              "fullTitle": "Testing Pet API should update pet for its ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .send({name: 'updated name', breed: 'new breed'})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "dd68e2c8-5af6-45a8-9d3c-6d2b8dbb8597",
              "parentUUID": "52e7919c-fcaa-43e7-8b5f-6f3a6cdc19e8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should not delete pet without token",
              "fullTitle": "Testing Pet API should not delete pet without token",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + id)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "e728b8ae-d6b6-4d48-9df6-cf2434167b31",
              "parentUUID": "52e7919c-fcaa-43e7-8b5f-6f3a6cdc19e8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should delete pet for its ID",
              "fullTitle": "Testing Pet API should delete pet for its ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "c37d8b08-cdfc-4b66-b1b1-60ca8db2a270",
              "parentUUID": "52e7919c-fcaa-43e7-8b5f-6f3a6cdc19e8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should not find deleted oet",
              "fullTitle": "Testing Pet API should not find deleted oet",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/' + userId)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "f1bc084e-17c0-4572-8ee5-d3ad8877b637",
              "parentUUID": "52e7919c-fcaa-43e7-8b5f-6f3a6cdc19e8",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "dfac021d-02ec-4c88-88d3-a416b034bc77",
            "ba6006bf-5026-4fe3-a19e-5d7dd222d654",
            "9bc9a72d-e6c3-4b45-9ef5-c668d186d888",
            "348c61cb-510e-47b6-8b0d-202f8d0af2c4",
            "aff725a0-3dbe-4c12-93b4-5519408814e3",
            "2c905725-77cf-42e8-86b2-cd64785505b8",
            "c8e1f880-8235-4e0e-ba96-252413eaf9a2",
            "006f6757-a203-44f3-a906-a7a8f452c59d",
            "dd68e2c8-5af6-45a8-9d3c-6d2b8dbb8597",
            "e728b8ae-d6b6-4d48-9df6-cf2434167b31",
            "c37d8b08-cdfc-4b66-b1b1-60ca8db2a270",
            "f1bc084e-17c0-4572-8ee5-d3ad8877b637"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5e78a092-058a-4698-9de7-b7787de16ccb",
          "title": "Testing User API",
          "fullFile": "C:\\Users\\arodr\\Documents\\AngularProjects\\tfm\\server\\test\\userTest.js",
          "file": "\\test\\userTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should save a new user",
              "fullTitle": "Testing User API should save a new user",
              "timedOut": false,
              "duration": 316,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/')\n    .send({username: 'Celia', password: 'celia', address: 'new direction', description: 'new description'})\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('id');\n        id = res.body.id;\n        done();\n    });",
              "err": {},
              "uuid": "a0f94f67-7fc6-44e9-aefe-2a8c15e6ac3e",
              "parentUUID": "5e78a092-058a-4698-9de7-b7787de16ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find user for its name",
              "fullTitle": "Testing User API should find user for its name",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/Celia')\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(1);\n        expect(res.body[0]).to.have.property('id').to.be.equal(id);\n        done();\n    });",
              "err": {},
              "uuid": "278e99ec-ab80-41e3-93ae-ce415fc2c892",
              "parentUUID": "5e78a092-058a-4698-9de7-b7787de16ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find user for non-existing user name",
              "fullTitle": "Testing User API should not find user for non-existing user name",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/search/Ce')\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "621bbbcb-cda2-4221-8c44-2dc8fb7f765b",
              "parentUUID": "5e78a092-058a-4698-9de7-b7787de16ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find user and return login token",
              "fullTitle": "Testing User API should find user and return login token",
              "timedOut": false,
              "duration": 316,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .post('/login')\n    .send({username: 'Celia', password: 'celia'})\n    .end(function (err, res){\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('token').not.be.null;\n        token = res.body.token;\n        done();\n    });",
              "err": {},
              "uuid": "e530e1d0-4094-4885-9592-e52ded34d982",
              "parentUUID": "5e78a092-058a-4698-9de7-b7787de16ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find user without token",
              "fullTitle": "Testing User API should not find user without token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + id)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "1275be69-6b5a-4b49-8018-f7af74f0bd69",
              "parentUUID": "5e78a092-058a-4698-9de7-b7787de16ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find user for its ID",
              "fullTitle": "Testing User API should find user for its ID",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(1);\n        expect(res.body[0]).to.have.property('id').to.be.equal(id);\n        done();\n    });",
              "err": {},
              "uuid": "667d9c57-4654-4b2d-947f-f5ab5271012d",
              "parentUUID": "5e78a092-058a-4698-9de7-b7787de16ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user without token",
              "fullTitle": "Testing User API should not update user without token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/' + id)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "6e5c8212-19c7-4fe8-b8e1-722f7aaaa534",
              "parentUUID": "5e78a092-058a-4698-9de7-b7787de16ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update user for non-existing ID",
              "fullTitle": "Testing User API should not update user for non-existing ID",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/111')\n    .set('Authorization', 'Bearer '  + token)\n    .send({address: 'another address', description: 'another description'})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "1903d8dc-dbd2-442f-9d3b-1bcec87e019d",
              "parentUUID": "5e78a092-058a-4698-9de7-b7787de16ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Created user should not have changed",
              "fullTitle": "Testing User API Created user should not have changed",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(1);\n        expect(res.body[0]).to.have.property('id').to.be.equal(id);\n        expect(res.body[0]).to.have.property('address').not.to.be.equal('another address');\n        expect(res.body[0]).to.have.property('description').not.to.be.equal('another description');\n        done();\n    });",
              "err": {},
              "uuid": "eaaecd38-b572-42c3-87e4-fb8f68490557",
              "parentUUID": "5e78a092-058a-4698-9de7-b7787de16ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user for its ID",
              "fullTitle": "Testing User API should update user for its ID",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .put('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .send({address: 'updated address', description: 'updated description'})\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "93a867cb-8190-4c3b-810a-fafd03f4a723",
              "parentUUID": "5e78a092-058a-4698-9de7-b7787de16ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete user without token",
              "fullTitle": "Testing User API should not delete user without token",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + id)\n    .end(function (err, res){\n        expect(res.header['authorization']).to.be.undefined;\n        expect(res).to.have.status(403);\n        done();\n    });",
              "err": {},
              "uuid": "cd7c47a8-4263-4397-84a2-08dc3a4f2d6b",
              "parentUUID": "5e78a092-058a-4698-9de7-b7787de16ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete user for its ID",
              "fullTitle": "Testing User API should delete user for its ID",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .delete('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "63c226f2-d42d-4fa9-bdf3-db898622cc0b",
              "parentUUID": "5e78a092-058a-4698-9de7-b7787de16ccb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find deleted user",
              "fullTitle": "Testing User API should not find deleted user",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get('/' + id)\n    .set('Authorization', 'Bearer '  + token)\n    .end(function (err, res){\n        expect(res.header['authorization']).not.be.null;\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.lengthOf(0);\n        done();\n    });",
              "err": {},
              "uuid": "c864e997-4e7e-4ef0-be08-27dc1100ca29",
              "parentUUID": "5e78a092-058a-4698-9de7-b7787de16ccb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a0f94f67-7fc6-44e9-aefe-2a8c15e6ac3e",
            "278e99ec-ab80-41e3-93ae-ce415fc2c892",
            "621bbbcb-cda2-4221-8c44-2dc8fb7f765b",
            "e530e1d0-4094-4885-9592-e52ded34d982",
            "1275be69-6b5a-4b49-8018-f7af74f0bd69",
            "667d9c57-4654-4b2d-947f-f5ab5271012d",
            "6e5c8212-19c7-4fe8-b8e1-722f7aaaa534",
            "1903d8dc-dbd2-442f-9d3b-1bcec87e019d",
            "eaaecd38-b572-42c3-87e4-fb8f68490557",
            "93a867cb-8190-4c3b-810a-fafd03f4a723",
            "cd7c47a8-4263-4397-84a2-08dc3a4f2d6b",
            "63c226f2-d42d-4fa9-bdf3-db898622cc0b",
            "c864e997-4e7e-4ef0-be08-27dc1100ca29"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 745,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}